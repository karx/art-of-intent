rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Allow aggregation queries (count, sum, avg) for statistics
    // This is needed for getCountFromServer() and similar operations
    function allowAggregation() {
      return true;
    }
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['userId', 'displayName', 'stats', 'preferences'])
        && data.userId is string
        && data.displayName is string;
    }
    
    function isValidSession(data) {
      return data.keys().hasAll(['sessionId', 'userId', 'gameDate'])
        && data.sessionId is string
        && data.userId is string
        && data.gameDate is string;
    }
    
    // Users collection
    match /users/{userId} {
      // Allow reading any user profile (for leaderboards and stats)
      // Includes get, list, and aggregation queries (count)
      allow read: if true;
      
      // Users can create their own profile
      allow create: if isOwner(userId)
        && isValidUser(request.resource.data)
        && request.resource.data.userId == userId;
      
      // Users can update their own profile
      allow update: if isOwner(userId)
        && request.resource.data.userId == userId;
      
      // No deletes allowed
      allow delete: if false;
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      // Anyone can read sessions (needed for leaderboards)
      // But only authenticated users can read full details
      allow read: if true;
      
      // Users can create their own sessions
      allow create: if isAuthenticated()
        && isValidSession(request.resource.data)
        && request.resource.data.userId == request.auth.uid;
      
      // Users can update their own sessions
      // Allow update if: user is authenticated AND (existing doc has no userId OR userId matches)
      allow update: if isAuthenticated()
        && (!resource.data.keys().hasAny(['userId']) || resource.data.userId == request.auth.uid)
        && request.resource.data.userId == request.auth.uid;
      
      // No deletes allowed
      allow delete: if false;
    }
    
    // Session events (detailed logs)
    match /sessionEvents/{sessionId} {
      // Users can read their own session events
      allow read: if isAuthenticated();
      
      // Users can create/update their own events
      allow create, update: if isAuthenticated();
      
      // No deletes allowed
      allow delete: if false;
    }
    
    // Leaderboard (singular - for daily rankings)
    match /leaderboard/{document=**} {
      // Anyone can read leaderboard
      allow read: if true;
      
      // Only authenticated users can write their scores
      allow create: if isAuthenticated();
      allow update: if isAuthenticated();
      allow delete: if false;
    }
    
    // Leaderboards (plural - for historical data)
    match /leaderboards/{document=**} {
      // Anyone can read leaderboards
      allow read: if true;
      
      // Only Cloud Functions can write (using service account)
      allow write: if false;
    }
    
    // Daily challenges (read-only for users)
    match /dailyChallenges/{date} {
      // Anyone can read daily challenges
      allow read: if true;
      
      // Only admin/Cloud Functions can write
      allow write: if false;
    }
  }
}
